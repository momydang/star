[tool.poetry]
name = "kakarot"
version = "0.1.0"
description = "EVM interpreter written in Cairo, a sort of ZK-EVM emulator, leveraging STARK proof system."
authors = []
readme = "README.md"
packages = [{ include = "scripts" }]

[tool.poetry.dependencies]
python = ">=3.9,<3.10"
cairo-lang = "^0.11"
amarna = "^0.1.5"
starknet-py = "^0.16"
py-evm = "^0.7.0a1"
openzeppelin-cairo-contracts = "^0.6.1"

[tool.poetry.group.dev.dependencies]
black = "^22.10.0"
isort = "^5.10.1"
cairo-coverage = "^0.1.5"
pandas = "^1.5.1"
pytest-xdist = { version = "^3.0.2", extras = ["psutil"] }
setproctitle = "^1.3.2"
pysha3 = "^1.0.2"
web3 = "^6"
python-dotenv = "^0.21.0"
autoflake = "^2.0.0"
pycryptodome = "^3.16.0"
rlp = "<=3"
hypothesis = "^6.65.0"
case-converter = "^1.1.0"
starknet-devnet = "0.5.3"
requests = "^2.28.2"
codespell = "^2.2.2"
eth-account = "^0.8.0"
eth-abi = "^4.0.0"
eth-utils = "^2.1.0"
eth-keys = "^0.4.0"
ipykernel = "^6.23.1"
toml = "^0.10.2"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:Using or importing the ABCs:DeprecationWarning",                                # from frozendict
    "ignore:lexer_state will be removed in subsequent releases. Use lexer_thread instead.", # from lark
    "ignore:abi:DeprecationWarning",                                                        # from web3
    "ignore::marshmallow.warnings.RemovedInMarshmallow4Warning",                            # from marshmallow
]
asyncio_mode = "auto"
markers = [
    "ArithmeticOperations",
    "ADD:            Opcode Value 0x01 - Addition operation",
    "MUL:            Opcode Value 0x02 - Multiplication operation",
    "SUB:            Opcode Value 0x03 - Subtraction operation",
    "DIV:            Opcode Value 0x04 - Integer division operation",
    "SDIV:           Opcode Value 0x05 - Signed integer division operation (truncated)",
    "MOD:            Opcode Value 0x06 - Modulo remainder operation",
    "SMOD:           Opcode Value 0x07 - Signed modulo remainder operation",
    "ADDMOD:         Opcode Value 0x08 - Modulo addition operation",
    "MULMOD:         Opcode Value 0x09 - Modulo multiplication operation",
    "EXP:            Opcode Value 0x0a - Exponential operation",
    "SIGNEXTEND:     Opcode Value 0x0b - Extend length of two's complement signed integer",
    "ComparisonBitwiseLogicOperations",
    "LT:             Opcode Value 0x10 - Less-than comparison",
    "GT:             Opcode Value 0x11 - Greater-than comparison",
    "SLT:            Opcode Value 0x12 - Signed less-than comparison",
    "SGT:            Opcode Value 0x13 - Signed greater-than comparison",
    "EQ:             Opcode Value 0x14 - Equality comparison",
    "ISZERO:         Opcode Value 0x15 - Simple not operator",
    "AND:            Opcode Value 0x16 - Bitwise AND operation",
    "OR:             Opcode Value 0x17 - Bitwise OR operation",
    "NOT:            Opcode Value 0x19 - Bitwise NOT operation",
    "SHL:            Opcode Value 0x1b - Shift left",
    "SHR:            Opcode Value 0x1c - Logical shift right",
    "SAR:            Opcode Value 0x1d - Arithmetic shift right",
    "SHA3:           Opcode Value 0x20 - Compute Keccak-256 hash",
    "EnvironmentalInformation",
    "ADDRESS:        Opcode Value 0x30 - Get address of currently executing account",
    "BALANCE:        Opcode Value 0x31 - Get balance of the given account",
    "ORIGIN:         Opcode Value 0x32 - Get execution origination address",
    "CALLER:         Opcode Value 0x33 - Get caller address",
    "CALLVALUE:      Opcode Value 0x34 - Get deposited value by the instruction/transaction responsible for this execution",
    "CALLDATALOAD:   Opcode Value 0x35 - Get input data of current environment",
    "CALLDATASIZE:   Opcode Value 0x36 - Get size of input data in current environment",
    "CALLDATACOPY:   Opcode Value 0x37 - Copy input data in current environment to memory",
    "CODESIZE:       Opcode Value 0x38 - Get size of code running in current environment",
    "CODECOPY:       Opcode Value 0x39 - Copy code running in current environment to memory",
    "RETURNDATASIZE: Opcode Value 0x3d - Get size of output data from the previous call from the current environment",
    "BlockInformation",
    "BLOCKHASH:      Opcode Value 0x40 - Get the hash of one of the 256 most recent complete blocks",
    "COINBASE:       Opcode Value 0x41 - Get the block's beneficiary address",
    "TIMESTAMP:      Opcode Value 0x42 - Get the block's timestamp",
    "NUMBER:         Opcode Value 0x43 - Get the block's number",
    "DIFFICULTY:     Opcode Value 0x44 - Get the block's difficulty",
    "GASLIMIT:       Opcode Value 0x45 - Get the block's gas limit",
    "CHAINID:        Opcode Value 0x46 - Get the chain ID",
    "SELFBALANCE:    Opcode Value 0x47 - Get the balance of the current contract",
    "BASEFEE:        Opcode Value 0x48 - Get the base fee of the current block",
    "StackMemoryStorageFlowOperations",
    "MLOAD:          Opcode Value 0x51 - Load word from memory",
    "MSTORE:         Opcode Value 0x52 - Save word to memory",
    "MSTORE8:        Opcode Value 0x53 - Save byte to memory",
    "JUMP:           Opcode Value 0x56 - Alter the program counter",
    "JUMPI:          Opcode Value 0x57 - Conditionally alter the program counter",
    "PC:             Opcode Value 0x58 - Get the value of the program counter prior to the increment",
    "MSIZE:          Opcode Value 0x59 - Get the size of active memory in bytes",
    "JUMPDEST:       Opcode Value 0x5b - Mark a valid destination for jumps",
    "PushOperations",
    "PUSH            Opcodes 0x60 ~ 7f - Place n-byte item on stack",
    "DuplicationOperations",
    "DUP:            Opcodes 0x80 ~ 8f - Duplicate nth stack item",
    "ExchangeOperations",
    "SWAP:           Opcodes 0x90 ~ 9f - Exchange 1st and nth stack items",
    "LoggingOperations",
    "LOG:            Opcodes 0xa0 ~ a4 - Append log record with n topics",
    "SystemOperations",
    "RETURN:         Opcode Value 0xf3 - Halt execution returning output data",
    "REVERT:         Opcode value 0xfd - Halt execution reverting state changes",
    "INVALID:        Opcode Value 0xfe - Designated invalid instruction",
    "Precompiles",
    "EC_RECOVER:     Precompile Value 0x01 - Elliptic curve digital signature algorithm (ECDSA) public key recovery function",
    "SHA256:         Precompile Value 0x02 - Hash function",
    "RIPEMD160:      Precompile Value 0x03 - Hash function",
    "MOD_EXP:        Precompile Value 0x05 - Modular exponentiation MVP - missing support for bigint",
    "EC_ADD:         Precompile Value 0x06 - Point addition (ADD) on the elliptic curve 'alt_bn128'",
    "EC_MUL:         Precompile Value 0x07 - Scalar multiplication (MUL) on the elliptic curve 'alt_bn128'",
    "BLAKE2F:        Precompile Value 0x09 - Blake2 compression function",
    "Counter",
    "PlainOpcodes",
    "SolmateERC20",
    "SolmateERC721",
    "UniswapV2ERC20",
    "UniswapV2Factory",
    "Utils",
]

[tool.isort]
profile = "black"

[tool.autoflake]
in_place = true
remove_unused_variables = true
remove_all_unused_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.codespell]
ignore-words = '.codespellignore'
skip = '.git'
check-filenames = ''
check-hidden = ''
